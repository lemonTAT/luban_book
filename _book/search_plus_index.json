{"./":{"url":"./","title":"Introduction","keywords":"","body":"鲁班应用搭建平台 Copyright @2019 all right reserved，powered by Gitbook该文件修订时间： 2019-10-22 14:02:01 "},"introduction/app.html":{"url":"introduction/app.html","title":"应用的构成","keywords":"","body":"应用的构成 从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。 Web应用是一种GUI软件 1、应用由页面构成 整个Web应用由页面组成 2、页面由组件组成 3、一个组件一个目录，资源就近维护 4、组件可组合，组件的JS可依赖其他JS模块，CSS可依赖其他CSS单元 3大框架定义了组件的开发和管理规范，应用往往由多功能、多页面、多状态、多系统构成。逻辑编排，数据拆包解包，最终通过JS(胶水)将这些逻辑，组件粘合在一起形成我们的页面。这带来了一下一些问题： 1、页面的组件无法做到可插拔，只能通过代码修改实现 2、逻辑编排、UI、数据拆解包通过JS粘合在一起，业务的变更和改动必须通过代码修改实现 3、当业务发生变更，我们往往又需要设计代码修改和发布 参考资料 前端工程——基础篇 致我们终将组件化的 Web Copyright @2019 all right reserved，powered by Gitbook该文件修订时间： 2019-10-22 11:00:48 "},"introduction/bigrender.html":{"url":"introduction/bigrender.html","title":"BigRender","keywords":"","body":"Bigrender介绍 参考资料 淘宝详情页的 BigRender 优化与存放大块 HTML 内容的最佳方式 Copyright @2019 all right reserved，powered by Gitbook该文件修订时间： 2019-10-22 11:02:29 "},"introduction/loader.html":{"url":"introduction/loader.html","title":"加载器","keywords":"","body":"Loader LuBanLoader.css(url, blockId) url(加载地址): string blockId(区块ID):string 加载CSS束 LuBanLoader.loadScript(url, blockId, async, next) 网页性能优化之异步加载js文件 url(加载地址): string blockId(区块ID):string async(JS 延时加载):defer|async next(区块ID):function 加载CSS束 LuBanLoader.getCurrentBlockData() LuBanLoader.getBlockData(blockId) blockId(区块ID):string LuBanLoader.removeBundle(blockId) blockId(区块ID):string ;(function(root, factory) { if (typeof exports === 'object') { // CommonJS module.exports = exports = factory(); } else if (typeof define === 'function' && define.amd) { // AMD define([], factory); } else { // Global (browser) root.LuBanLoader = factory(); } }(this, function() { var LuBanLoader = LuBanLoader || (function(window, document) { var LuBanLoader = {}; LuBanLoader.version = '1.0.0'; var head = document.getElementsByTagName('head')[0]; var body = document.getElementsByTagName('body')[0]; // 异步加载JS var loadScript = LuBanLoader.loadScript = function(url, blockId, async, next) { var script = document.createElement('script'); script.charset = 'UTF-8'; script.async = async; if (blockId) { script.dataset.jsBlockId = blockId; } script.onerror = function() { next && next(true); }; var loaded = false; script.onload = script.onreadystatechange = function() { if (!loaded && (!script.readyState || 'loaded' === script.readyState || 'complete' === script.readyState)) { loaded = true; setTimeout(function() { next && next(false); }, 0); } }; script.src = url; body.appendChild(script); }; // 异步加载CSS var loadCss = LuBanLoader.loadCss = function(url, blockId) { var style = document.createElement('link'); style.href = url; if (blockId) { style.dataset.cssBlockId = blockId; } style.rel = 'stylesheet'; style.type = 'text/css'; head.appendChild(style); }; var getCurrentBlockData = LuBanLoader.getCurrentBlockData = function() { /** * 当前正在被执行的脚本 * https://caniuse.com/#search=currentScript */ var currentScript = document.currentScript; var currentUUID = (currentScript && currentScript.dataset.jsBlockId) || ''; var blockDataEle = document.querySelectorAll(`[data-block-textarea=\"${currentUUID}\"]`); var currentBlockDataStr = (blockDataEle.length > 0 && blockDataEle[0].innerText) || ''; var blockObj = {}; if (currentBlockDataStr) { blockObj = JSON.parse(currentBlockDataStr); } return blockObj; }; var getBlockData = LuBanLoader.getBlockData = function(blockId) { var blockDataEle = document.querySelectorAll(`[data-block-textarea=\"${blockId}\"]`); var blockDataStr = (blockDataEle.length > 0 && blockDataEle[0].innerText) || ''; var blockObj = {}; if (blockDataStr) { blockObj = JSON.parse(blockDataStr); } return blockObj; }; var removeBundle = Loader.removeBundle = function(blockId) { var cssBundleEle = document.querySelectorAll(`[data-css-block-id=\"${blockId}\"]`); var jsBundleEle = document.querySelectorAll(`[data-js-block-id=\"${blockId}\"]`); cssBundleEle && cssBundleEle[0] && cssBundleEle[0].remove(); jsBundleEle && jsBundleEle[0] && jsBundleEle[0].remove(); }; return LuBanLoader; }(window, document)); return LuBanLoader; })); Copyright @2019 all right reserved，powered by Gitbook该文件修订时间： 2019-10-22 11:51:41 "},"demo/methods.html":{"url":"demo/methods.html","title":"API","keywords":"","body":"定义方法 打印 展示 JavaScript 和 Java 如何输出信息 这里演示 JavaScript 如何输出信息到控制台 console.log('Hello World'); 这里演示 Java 如何输出信息到控制台 System.out.println(\"Hello World\"); 这里是 JavaScript 和 Java 共同的信息 定义变量 这里演示 JavaScript 和 Java 如何定义变量 这里演示 JavaScript 如何定义变量： var i = 0; var j = \"a\"; var k = new function() { } 这里演示 Java 如何定义变量 int i = 0; String j = \"a\"; Object o = new Object(); Copyright @2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 13:39:10 "},"demo/alert.html":{"url":"demo/alert.html","title":"Alert","keywords":"","body":"Info styling [info] For info Use this for infomation messages. Warning styling [warning] For warning Use this for warning messages. Danger styling [danger] For danger Use this for danger messages. Success styling [success] For info Use this for success messages. Copyright @2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 13:39:10 "},"demo/demo.html":{"url":"demo/demo.html","title":"Demo","keywords":"","body":"一级别标题 二级标题 三级标题 区块引用 嵌套引用 /* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress * @license MIT */ ;(function(root, factory) { if (typeof define === 'function' && define.amd) { define(factory); } else if (typeof exports === 'object') { module.exports = factory(); } else { root.NProgress = factory(); } })(this, function() { var NProgress = {}; NProgress.version = '0.2.0'; var Settings = NProgress.settings = { minimum: 0.08, easing: 'ease', positionUsing: '', speed: 200, trickle: true, trickleRate: 0.02, trickleSpeed: 800, showSpinner: true, barSelector: '[role=\"bar\"]', spinnerSelector: '[role=\"spinner\"]', parent: 'body', template: '' }; /** * Updates configuration. * * NProgress.configure({ * minimum: 0.1 * }); */ NProgress.configure = function(options) { var key, value; for (key in options) { value = options[key]; if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value; } return this; }; /** * Last number. */ NProgress.status = null; /** * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`. * * NProgress.set(0.4); * NProgress.set(1.0); */ NProgress.set = function(n) { var started = NProgress.isStarted(); n = clamp(n, Settings.minimum, 1); NProgress.status = (n === 1 ? null : n); var progress = NProgress.render(!started), bar = progress.querySelector(Settings.barSelector), speed = Settings.speed, ease = Settings.easing; progress.offsetWidth; /* Repaint */ queue(function(next) { // Set positionUsing if it hasn't already been set if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS(); // Add transition css(bar, barPositionCSS(n, speed, ease)); if (n === 1) { // Fade out css(progress, { transition: 'none', opacity: 1 }); progress.offsetWidth; /* Repaint */ setTimeout(function() { css(progress, { transition: 'all ' + speed + 'ms linear', opacity: 0 }); setTimeout(function() { NProgress.remove(); next(); }, speed); }, speed); } else { setTimeout(next, speed); } }); return this; }; NProgress.isStarted = function() { return typeof NProgress.status === 'number'; }; /** * Shows the progress bar. * This is the same as setting the status to 0%, except that it doesn't go backwards. * * NProgress.start(); * */ NProgress.start = function() { if (!NProgress.status) NProgress.set(0); var work = function() { setTimeout(function() { if (!NProgress.status) return; NProgress.trickle(); work(); }, Settings.trickleSpeed); }; if (Settings.trickle) work(); return this; }; /** * Hides the progress bar. * This is the *sort of* the same as setting the status to 100%, with the * difference being `done()` makes some placebo effect of some realistic motion. * * NProgress.done(); * * If `true` is passed, it will show the progress bar even if its hidden. * * NProgress.done(true); */ NProgress.done = function(force) { if (!force && !NProgress.status) return this; return NProgress.inc(0.3 + 0.5 * Math.random()).set(1); }; /** * Increments by a random amount. */ NProgress.inc = function(amount) { var n = NProgress.status; if (!n) { return NProgress.start(); } else { if (typeof amount !== 'number') { amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95); } n = clamp(n + amount, 0, 0.994); return NProgress.set(n); } }; NProgress.trickle = function() { return NProgress.inc(Math.random() * Settings.trickleRate); }; /** * Waits for all supplied jQuery promises and * increases the progress as the promises resolve. * * @param $promise jQUery Promise */ (function() { var initial = 0, current = 0; NProgress.promise = function($promise) { if (!$promise || $promise.state() === \"resolved\") { return this; } if (current === 0) { NProgress.start(); } initial++; current++; $promise.always(function() { current--; if (current === 0) { initial = 0; NProgress.done(); } else { NProgress.set((initial - current) / initial); } }); return this; }; })(); /** * (Internal) renders the progress bar markup based on the `template` * setting. */ NProgress.render = function(fromStart) { if (NProgress.isRendered()) return document.getElementById('nprogress'); addClass(document.documentElement, 'nprogress-busy'); var progress = document.createElement('div'); progress.id = 'nprogress'; progress.innerHTML = Settings.template; var bar = progress.querySelector(Settings.barSelector), perc = fromStart ? '-100' : toBarPerc(NProgress.status || 0), parent = document.querySelector(Settings.parent), spinner; css(bar, { transition: 'all 0 linear', transform: 'translate3d(' + perc + '%,0,0)' }); if (!Settings.showSpinner) { spinner = progress.querySelector(Settings.spinnerSelector); spinner && removeElement(spinner); } if (parent != document.body) { addClass(parent, 'nprogress-custom-parent'); } parent.appendChild(progress); return progress; }; /** * Removes the element. Opposite of render(). */ NProgress.remove = function() { removeClass(document.documentElement, 'nprogress-busy'); removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent'); var progress = document.getElementById('nprogress'); progress && removeElement(progress); }; /** * Checks if the progress bar is rendered. */ NProgress.isRendered = function() { return !!document.getElementById('nprogress'); }; /** * Determine which positioning CSS rule to use. */ NProgress.getPositioningCSS = function() { // Sniff on document.body.style var bodyStyle = document.body.style; // Sniff prefixes var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' : ('MozTransform' in bodyStyle) ? 'Moz' : ('msTransform' in bodyStyle) ? 'ms' : ('OTransform' in bodyStyle) ? 'O' : ''; if (vendorPrefix + 'Perspective' in bodyStyle) { // Modern browsers with 3D support, e.g. Webkit, IE10 return 'translate3d'; } else if (vendorPrefix + 'Transform' in bodyStyle) { // Browsers without 3D support, e.g. IE9 return 'translate'; } else { // Browsers without translate() support, e.g. IE7-8 return 'margin'; } }; /** * Helpers */ function clamp(n, min, max) { if (n max) return max; return n; } /** * (Internal) converts a percentage (`0..1`) to a bar translateX * percentage (`-100%..0%`). */ function toBarPerc(n) { return (-1 + n) * 100; } /** * (Internal) returns the correct CSS for changing the bar's * position given an n percentage, and speed and ease from Settings */ function barPositionCSS(n, speed, ease) { var barCSS; if (Settings.positionUsing === 'translate3d') { barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' }; } else if (Settings.positionUsing === 'translate') { barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' }; } else { barCSS = { 'margin-left': toBarPerc(n)+'%' }; } barCSS.transition = 'all '+speed+'ms '+ease; return barCSS; } /** * (Internal) Queues a function to be executed. */ var queue = (function() { var pending = []; function next() { var fn = pending.shift(); if (fn) { fn(next); } } return function(fn) { pending.push(fn); if (pending.length == 1) next(); }; })(); /** * (Internal) Applies css properties to an element, similar to the jQuery * css method. * * While this helper does assist with vendor prefixed property names, it * does not perform any manipulation of values prior to setting styles. */ var css = (function() { var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ], cssProps = {}; function camelCase(string) { return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) { return letter.toUpperCase(); }); } function getVendorProp(name) { var style = document.body.style; if (name in style) return name; var i = cssPrefixes.length, capName = name.charAt(0).toUpperCase() + name.slice(1), vendorName; while (i--) { vendorName = cssPrefixes[i] + capName; if (vendorName in style) return vendorName; } return name; } function getStyleProp(name) { name = camelCase(name); return cssProps[name] || (cssProps[name] = getVendorProp(name)); } function applyCss(element, prop, value) { prop = getStyleProp(prop); element.style[prop] = value; } return function(element, properties) { var args = arguments, prop, value; if (args.length == 2) { for (prop in properties) { value = properties[prop]; if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value); } } else { applyCss(element, args[1], args[2]); } } })(); /** * (Internal) Determines if an element or space separated list of class names contains a class name. */ function hasClass(element, name) { var list = typeof element == 'string' ? element : classList(element); return list.indexOf(' ' + name + ' ') >= 0; } /** * (Internal) Adds a class to an element. */ function addClass(element, name) { var oldList = classList(element), newList = oldList + name; if (hasClass(oldList, name)) return; // Trim the opening space. element.className = newList.substring(1); } /** * (Internal) Removes a class from an element. */ function removeClass(element, name) { var oldList = classList(element), newList; if (!hasClass(element, name)) return; // Replace the class name. newList = oldList.replace(' ' + name + ' ', ' '); // Trim the opening and closing spaces. element.className = newList.substring(1, newList.length - 1); } /** * (Internal) Gets a space separated list of the class names on the element. * The list is wrapped with a single space on each end to facilitate finding * matches within the list. */ function classList(element) { return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' '); } /** * (Internal) Removes an element from the DOM. */ function removeElement(element) { element && element.parentNode && element.parentNode.removeChild(element); } return NProgress; }); 列表 左对齐标题 右对齐标题 居中对齐标题 短文本 中等文本 稍微长一点的文本 稍微长一点的文本 短文本 中等文本 四级标题 五级标题 六级标题 Copyright @2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-08 13:39:10 "}}